// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-cf-to-handshake="disable-task-pipelining" %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @simple_loop(
// CHECK-SAME:                                %[[VAL_0:.*]]: none, ...) -> none
// CHECK:           %[[VAL_0x:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_1:.*]] = br %[[VAL_0x]] : none
// CHECK:           %[[VAL_2:.*]], %[[VAL_3:.*]] = control_merge %[[VAL_1]] : none, index
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_2]] {value = 1 : index} : index
// CHECK:           %[[VAL_5:.*]] = constant %[[VAL_2]] {value = 42 : index} : index
// CHECK:           %[[VAL_6:.*]] = br %[[VAL_2]] : none
// CHECK:           %[[VAL_7:.*]] = br %[[VAL_4]] : index
// CHECK:           %[[VAL_8:.*]] = br %[[VAL_5]] : index
// CHECK:           %[[VAL_14:.*]] = mux %[[VAL_10:.*]] {{\[}}%[[VAL_15:.*]], %[[VAL_7]]] : index, index
// CHECK:           %[[VAL_9:.*]] = mux %[[VAL_10]] {{\[}}%[[VAL_11:.*]], %[[VAL_8]]] : index, index
// CHECK:           %[[VAL_12:.*]], %[[VAL_10]] = control_merge %[[VAL_13:.*]], %[[VAL_6]] : none, index
// CHECK:           %[[VAL_16:.*]] = arith.cmpi slt, %[[VAL_14]], %[[VAL_9]] : index
// CHECK:           %[[VAL_21:.*]], %[[VAL_22:.*]] = cond_br %[[VAL_16]], %[[VAL_14]] : index
// CHECK:           %[[VAL_17:.*]], %[[VAL_18:.*]] = cond_br %[[VAL_16]], %[[VAL_9]] : index
// CHECK:           %[[VAL_19:.*]], %[[VAL_20:.*]] = cond_br %[[VAL_16]], %[[VAL_12]] : none
// CHECK:           %[[VAL_24:.*]] = merge %[[VAL_17]] : index
// CHECK:           %[[VAL_23:.*]] = merge %[[VAL_21]] : index
// CHECK:           %[[VAL_25:.*]], %[[VAL_26:.*]] = control_merge %[[VAL_19]] : none, index
// CHECK:           %[[VAL_27:.*]] = constant %[[VAL_25]] {value = 1 : index} : index
// CHECK:           %[[VAL_28:.*]] = arith.addi %[[VAL_23]], %[[VAL_27]] : index
// CHECK:           %[[VAL_11]] = br %[[VAL_24]] : index
// CHECK:           %[[VAL_13]] = br %[[VAL_25]] : none
// CHECK:           %[[VAL_15]] = br %[[VAL_28]] : index
// CHECK:           %[[VAL_29:.*]], %[[VAL_30:.*]] = control_merge %[[VAL_20]] : none, index
// CHECK:           return %[[VAL_29]] : none
// CHECK:         }
func.func @simple_loop() {
^bb0:
  cf.br ^bb1
^bb1:	// pred: ^bb0
  %c1 = arith.constant 1 : index
  %c42 = arith.constant 42 : index
  cf.br ^bb2(%c1 : index)
^bb2(%0: index):	// 2 preds: ^bb1, ^bb3
  %1 = arith.cmpi slt, %0, %c42 : index
  cf.cond_br %1, ^bb3, ^bb4
^bb3:	// pred: ^bb2
  %c1_0 = arith.constant 1 : index
  %2 = arith.addi %0, %c1_0 : index
  cf.br ^bb2(%2 : index)
^bb4:	// pred: ^bb2
  return
}

// -----

// CHECK-LABEL:   handshake.func @simpleDiamond(
// CHECK-SAME:                                  %[[VAL_0:.*]]: i1,
// CHECK-SAME:                                  %[[VAL_1:.*]]: i64,
// CHECK-SAME:                                  %[[VAL_2:.*]]: none, ...) -> none
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_0]] : i1
// CHECK:           %[[VAL_4:.*]] = merge %[[VAL_1]] : i64
// CHECK:           %[[VAL_2x:.*]] = merge %[[VAL_2]] : none
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]] = cond_br %[[VAL_3]], %[[VAL_4]] : i64
// CHECK:           %[[VAL_7:.*]], %[[VAL_8:.*]] = cond_br %[[VAL_3]], %[[VAL_2x]] : none
// CHECK:           %[[VAL_11:.*]] = merge %[[VAL_5]] : i64
// CHECK:           %[[VAL_9:.*]], %[[VAL_10:.*]] = control_merge %[[VAL_7]] : none, index
// CHECK:           %[[VAL_13:.*]] = br %[[VAL_11]] : i64
// CHECK:           %[[VAL_12:.*]] = br %[[VAL_9]] : none
// CHECK:           %[[VAL_16:.*]] = merge %[[VAL_6]] : i64
// CHECK:           %[[VAL_14:.*]], %[[VAL_15:.*]] = control_merge %[[VAL_8]] : none, index
// CHECK:           %[[VAL_18:.*]] = br %[[VAL_16]] : i64
// CHECK:           %[[VAL_17:.*]] = br %[[VAL_14]] : none
// CHECK:           %[[VAL_21:.*]] = mux %[[VAL_20:.*]] {{\[}}%[[VAL_18]], %[[VAL_13]]] : index, i64
// CHECK:           %[[VAL_19:.*]], %[[VAL_20]] = control_merge %[[VAL_17]], %[[VAL_12]] : none, index
// CHECK:           return %[[VAL_19]] : none
// CHECK:         }
func.func @simpleDiamond(%arg0: i1, %arg1: i64) {
  cf.cond_br %arg0, ^bb1(%arg1: i64), ^bb2(%arg1: i64)
^bb1(%v1: i64):  // pred: ^bb0
  cf.br ^bb3(%v1: i64)
^bb2(%v2: i64):  // pred: ^bb0
  cf.br ^bb3(%v2: i64)
^bb3(%v3: i64):  // 2 preds: ^bb1, ^bb2
  return
}
