// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-cf-to-handshake %s | FileCheck %s

// CHECK:   handshake.func @ops(%[[VAL_0:.*]]: f32, %[[VAL_1:.*]]: f32, %[[VAL_2:.*]]: i32, %[[VAL_3:.*]]: i32, %[[VAL_4:.*]]: none, ...) -> (f32, i32, none)
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_0]] : f32
// CHECK:           %[[VAL_6:.*]] = merge %[[VAL_1]] : f32
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_2]] : i32
// CHECK:           %[[VAL_8:.*]] = merge %[[VAL_3]] : i32
// CHECK:           %[[VAL_9:.*]] = merge %[[VAL_4]] : none
// CHECK:           %[[VAL_10:.*]] = arith.subf %[[VAL_5]], %[[VAL_6]] : f32
// CHECK:           %[[VAL_11:.*]] = arith.subi %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           %[[VAL_12:.*]] = arith.cmpi slt, %[[VAL_7]], %[[VAL_11]] : i32
// CHECK:           %[[VAL_13:.*]] = arith.divsi %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           %[[VAL_14:.*]] = arith.divui %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           %[[VAL_15:.*]] = arith.remsi %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           %[[VAL_16:.*]] = arith.remui %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           %[[VAL_17:.*]] = arith.select %[[VAL_12]], %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           %[[VAL_18:.*]] = arith.divf %[[VAL_5]], %[[VAL_6]] : f32
// CHECK:           %[[VAL_19:.*]] = arith.remf %[[VAL_5]], %[[VAL_6]] : f32
// CHECK:           %[[VAL_20:.*]] = arith.andi %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           %[[VAL_21:.*]] = arith.ori %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           %[[VAL_22:.*]] = arith.xori %[[VAL_7]], %[[VAL_8]] : i32
// CHECK:           return %[[VAL_10]], %[[VAL_13]], %[[VAL_9]] : f32, i32, none
// CHECK:         }
func.func @ops(f32, f32, i32, i32) -> (f32, i32) {
^bb0(%arg0: f32, %arg1: f32, %arg2: i32, %arg3: i32):
  %0 = arith.subf %arg0, %arg1: f32
  %1 = arith.subi %arg2, %arg3: i32
  %2 = arith.cmpi slt, %arg2, %1 : i32
  %4 = arith.divsi %arg2, %arg3 : i32
  %5 = arith.divui %arg2, %arg3 : i32
  %6 = arith.remsi %arg2, %arg3 : i32
  %7 = arith.remui %arg2, %arg3 : i32
  %8 = arith.select %2, %arg2, %arg3 : i32
  %9 = arith.divf %arg0, %arg1 : f32
  %10 = arith.remf %arg0, %arg1 : f32
  %11 = arith.andi %arg2, %arg3 : i32
  %12 = arith.ori %arg2, %arg3 : i32
  %13 = arith.xori %arg2, %arg3 : i32
  return %0, %4 : f32, i32
}
